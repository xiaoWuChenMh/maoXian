<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">

    <!-- 加载启动spring容器 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:spring/applicationContext-*.xml
        </param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- 配置springmvc的前端控制器 -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--contextConfigLocation配置springmvc加载的配置文件（处理器、映射器等等）如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称-servlet.xml（springmvc-servlet.xml）-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/springmvc.xml</param-value>
        </init-param>
        <!-- 表示servlet随服务启动，里面的值要大于等于0，越小级别越高，一般设置为1、2 -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <!-- 此处可以多种配置方式：
            第一种：*.action，以.action结尾的url进行访问时由DispatcherServlet解析
            第二种：/，所有访问的URL都由DispatcherServlet解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析
                使用此种方式，可以实现RESTful风格的url
            第三种：/*，经测试，这种配置有问题。
                   如果请求或者通过Controller转发jsp页面时，也会被拦截，此时找不到handler，会报错
        -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- 配置Log4j -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:logs/log4j.properties</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>

</web-app>